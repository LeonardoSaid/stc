// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	payload "github.com/leonardosaid/stc/accounts/pkg/stc-sdk/session/accounts/payload"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// FindBalanceByID provides a mock function with given fields: id
func (_m *Client) FindBalanceByID(id string) (payload.BalanceResponse, error) {
	ret := _m.Called(id)

	var r0 payload.BalanceResponse
	if rf, ok := ret.Get(0).(func(string) payload.BalanceResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(payload.BalanceResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCPF provides a mock function with given fields: accountID
func (_m *Client) FindByCPF(accountID string) (payload.AccountResponse, error) {
	ret := _m.Called(accountID)

	var r0 payload.AccountResponse
	if rf, ok := ret.Get(0).(func(string) payload.AccountResponse); ok {
		r0 = rf(accountID)
	} else {
		r0 = ret.Get(0).(payload.AccountResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBalanceByID provides a mock function with given fields: id, data
func (_m *Client) UpdateBalanceByID(id string, data payload.UpdateBalanceRequest) error {
	ret := _m.Called(id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, payload.UpdateBalanceRequest) error); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
