// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/leonardosaid/stc/accounts/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AccountUseCase is an autogenerated mock type for the AccountUseCase type
type AccountUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *AccountUseCase) Create(_a0 context.Context, _a1 *domain.Account) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Account) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindBalanceByID provides a mock function with given fields: _a0, _a1
func (_m *AccountUseCase) FindBalanceByID(_a0 context.Context, _a1 uuid.UUID) (int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCPF provides a mock function with given fields: _a0, _a1
func (_m *AccountUseCase) FindByCPF(_a0 context.Context, _a1 string) (*domain.Account, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domain.Account
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Account); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0
func (_m *AccountUseCase) List(_a0 context.Context) ([]domain.Account, error) {
	ret := _m.Called(_a0)

	var r0 []domain.Account
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Account); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBalanceByID provides a mock function with given fields: _a0, _a1
func (_m *AccountUseCase) UpdateBalanceByID(_a0 context.Context, _a1 *domain.Account) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Account) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAccountUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountUseCase creates a new instance of AccountUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountUseCase(t mockConstructorTestingTNewAccountUseCase) *AccountUseCase {
	mock := &AccountUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
